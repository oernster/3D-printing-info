######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28 METHOD=CONTACT CALIBRATE=1                                                                ; calibrate z offset and beacon model hot
    {% endif %}

[gcode_macro PRINT_START]
gcode:
    {% set BED = params.BED|int %}
    {% set EXTRUDER = params.EXTRUDER|int %}
    {% set CHAMBER = params.CHAMBER|default(0)|int %}
    CASELIGHTS
    _cpufreq_set GOVERNOR=performance
    M204 S50000
    M118 Heating prep
    STATUS_HEATING
    M104 S150                                                                                           ; Set hotend temp 
    M140 S{BED}                                                                                         ; Set bed temp
    M190 S{BED}                                                                                         ; Wait for bed temp
    M109 S150                                                                                           ; Wait for hotend temp at 150C for Tap/Beacon/Cartographer
    CG28
    G90
    G0 Z2                                                                                               ; position beacon at 2mm for heat soak
    BEDEFFECTS
    M118 Cleaning...
    CLEANNOZZLE
    WARMUP
    {% if BED >= 105 %}                                                                                 ; Only heat soak if ABS/ASA
      M118 Heat soak...
      TEMPERATURE_WAIT SENSOR="temperature_sensor CHAMBER" MINIMUM={CHAMBER}                            ; Heat soak (Slicer should have this in Start G-Code "PRINT_START BED=[first_layer_bed_temperature] EXTRUDER=[first_layer_temperature] CHAMBER=[chamber_temperature]" )
    {% endif %}
    M118 Levelling
    G90 													 											 ; absolute positioning
    G28 Z                                                                                               ; calibrate z offset and beacon model hot
    GREEN
    M118 Z_TILT
    Z_TILT_ADJUST                                                                                       ; or QGL to balance towers
    STATUS_MESHING	
    M118 Meshing...
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE ADAPTIVE=1 RUNS=2                                                                ; bed mesh in scan mode
    # CARTOGRAPHER_TOUCH RETRIES=20
    G28 Z                                                                                               ; calibrate z offset only after tilt/mesh
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1                                                  ; enable filament runout encoder sensor
    M118 Wait hotend
    M104 S{EXTRUDER}
    M109 S{EXTRUDER}                                                                                      ; wait for hotend temp
    # SET_GCODE_OFFSET Z_ADJUST={OFFSET}                                                                ; apply optional material squish via slicer
    G92 E0                              																 ; reset Extruder
	SWIPENOZZLE
    G1 Z2.0 F3000                       																 ; move Z Axis up
    _PURGE_LINE
  	M118 Printing...
    PROGRESSBAR
    PRINT_START_SOUND

[gcode_macro _PURGE_LINE]
gcode:
    {% if "z" not in printer.toolhead.homed_axes %}
      G28                                                                                               ; Only G28 Home if needed
    {% endif %}
    M118 Purging...
    G0 X20 Y8 Z0.2 F9000                                                                                ; Move to start position
    G92 E0                                                                                              ; Reset Extruder
    G1 E10 F600                                                                                         ; Extrude a little
    G1 X120 E20 F1000                                                                                   ; Draw line
    G92 E0                                                                                              ; Reset Extruder
    G91                                                                                                 ; relative positioning
    G0 Z10 F1000                                                                                        ; Raise nozzle
    G90

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    G91
    G1 Z2 F3000
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 25} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0                                                  ; disable filament runout encoder sensor
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_READY
    ## End Print Macro / Idle Timeout
    _cpufreq_set GOVERNOR=ondemand
    M118 Print complete!
    RAINBOW
    PRINT_END_SOUND
	
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
        CRITICALERROR

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        FILAMENT_RUNOUT_SOUND
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        FILAMENT_RESUME_SOUND
        BASE_RESUME                                                                  ; resume print
        RAINBOW
    {% endif %}

# Filament runout / change alias	
[gcode_macro M600]
gcode:
    PAUSE
	
[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=Exhaust SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	G90																; absolute positioning
	G0 X280 Z5 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z0.5 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X250 F{s*60}												; wipe back
		G0 X280	F{s*60}												; wipe forth
	{% endfor %}
	G0 X250	F{s*60}													; wipe back
	G0 Z5 F19500													; raise
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	G90																; absolute positioning
	G0 X280 Z5 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z0.5 F19500													; lower
	G0 X250 F2400													; wipe back
	G0 Z5	F19500													; raise
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE


######################### FILAMENT #########################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT